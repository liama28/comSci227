package homework1;

public class Backpacker {
	
	public static final int SYMPATHY_FACTOR = 30;
	
	public int funds;
	private City location; 
	private String journal;
	private int nights;
	private int postCardsSent;
	private int trainStation;
	
	
	
	
	
	public Backpacker(int initialFunds, City initialCity) {
		funds = initialFunds;
		location = initialCity;
		journal = location.getCityName() + "(start)";
		nights = 0;
		
		
	}
	
	 public String getCurrentCity() {
		 return location.getCityName();
	 }
	 //Returns the name of the Backpacker's current city.
	 
	 public int getCurrentMoney() {
		 return funds;
	 }
	 //Returns the amount of money the Backpacker currently has.
	 
	 public String getJournal() {
		 return journal;
	 }
	 //Returns the Backpacker's journal. The journal is a string of comma-separated values of the
	 //form cityname(number_of_nights) containing the cities visited by the Backpacker, in the order
	 //visited, along with the number of nights spent in each. The first value always has the form
	 //cityname(start) for the starting city. For example, if a Backpacker starts in Paris, spends 5
	 //nights in Rome, and then spends 2 nights in Prague, the journal string would be:
	 //Paris(start),Rome(5),Prague(2). public boolean isSOL()
	 //Returns true if Backpacker doesn’t have enough money to send postcard from the current city.
	 
	 public int getNightsInStation() {
		 return trainStation;
	 }
	 //Returns the number of nights the Backpacker has spent in a train station when visiting a city without enough money for hostels.
	 
	 public void visit(City c, int numNights) {
		 location = c;
		 nights = numNights;
		 trainStation += Math.max(nights - location.nightsStay(funds), 0);
		 funds -= (nights - Math.max(nights - location.nightsStay(funds), 0)) *  location.hostelCost();
		 journal += ", " + location.getCityName() + '(' + numNights + ')'; 
	 }
	 //Simulates a visit by this Backpacker to the given city for the given number of nights. 
	 //The Backpacker's money is reduced based on the number of nights of hostel booked. When the 
	 //funds are not sufficient for numNights nights of stay in the city, the number of nights spent 
	 //in the train station is updated accordingly. The journal is updated by appending a comma, the city name, and 
	 //the number of nights in parentheses.
	 
	 public void sendPostcardsHome(int howMany) {
		 howMany = Math.min(location.numPostcards(funds), howMany);
		 funds = (int) (funds - howMany * location.postcardCost());
		 postCardsSent += howMany;
		 
		 
		 
	 }
	 //Sends the given number of postcards, if possible, reducing the Backpacker's funds appropriately and increasing 
	 //the count of postcards sent. If there is not enough money, sends as many postcards as possible without allowing the 
	 //funds to go below zero.
	 
	 public void callHomeForMoney() {
		 funds += SYMPATHY_FACTOR * postCardsSent;
		 postCardsSent = 0;
	 }
	 //Increases the Backpacker's funds by an amount equal to SYMPATHY_FACTOR times the number of postcards sent 
	 //since the last call to this method, and resets the count of the number of postcards sent back to zero.

	 public boolean isSOL() {
		 return funds < location.postcardCost();
	 }
	 //Returns true if Backpacker doesn’t have enough money to send postcard from the current city.
	 

}
